str_replace_all(c("p" = "Smartphone", "v" = "TV", "x" = "Laptop", "q" = "Tablet"))
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(readxl)
library(tidyverse)
library(stringr)
refine <- read_xlsx("~/Downloads/refine-1.xlsx")
akzo <- which(tolower(refine$company) %>% str_detect("ak"))
vanhouten <- which(tolower(refine$company) %>% str_detect("hou"))
unilever <- which(tolower(refine$company) %>% str_detect("uni"))
phillips <- which(tolower(refine$company) %>% str_detect("ps"))
refine$company[phillips] = "philips"
refine$company[akzo] = "akzo"
refine$company[vanhouten] = "van houten"
refine$company[unilever] = "unilever"
refine <- add_column(refine, product_code = "1", .before = 2)
refine <- add_column(refine, product_number = "1", .after = 2)
refine$product_code = str_sub(refine$`Product code / number`, 1, 1)
refine$product_number <- str_split(refine$`Product code / number`, "-") %>%
sapply("[", 2)
refine$product_code <- refine$product_code %>%
str_replace_all(c("p" = "Smartphone", "v" = "TV", "x" = "Laptop", "q" = "Tablet"))
View(refine)
refine <- refine[-4]
unite(refine, full_address, c(address, city, country), remove=FALSE)
?unite
unite(refine, full_address, c(address, city, country), sep = ",", remove=FALSE)
unite(refine, full_address, c(address, city, country), sep = ", ", remove=FALSE)
refine <- unite(refine, full_address, c(address, city, country), sep = ", ", remove=FALSE)
refine <- refine[-5:7]
drop.cols <- c('address', 'city', 'country')
refine <- refine[-drop.cols]
refine %>% select[-drop.cols]
refine %>% select(-drop.cols)
refine %>% select(-one_of(drop.cols))
refine %>% select[-drop.cols]
drop.cols <- c(address, city, country)
refine[-c(address, city, country)]
refine[-[5:7]]
refine[-c(5:7)]
refine <- refine[-c(5:7)]
add_column(refine, company_philips, company_akzo, company_van_houten, company_unilever, .after = 1)
?dfcat
??dfcat
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(readxl)
library(tidyverse)
library(stringr)
refine <- read_xlsx("~/Downloads/refine-1.xlsx")
akzo <- which(tolower(refine$company) %>% str_detect("ak"))
vanhouten <- which(tolower(refine$company) %>% str_detect("hou"))
unilever <- which(tolower(refine$company) %>% str_detect("uni"))
phillips <- which(tolower(refine$company) %>% str_detect("ps"))
refine$company[phillips] = "philips"
refine$company[akzo] = "akzo"
refine$company[vanhouten] = "van houten"
refine$company[unilever] = "unilever"
refine <- add_column(refine, product_code = "1", .before = 2)
refine <- add_column(refine, product_number = "1", .after = 2)
refine$product_code = str_sub(refine$`Product code / number`, 1, 1)
refine$product_number <- str_split(refine$`Product code / number`, "-") %>%
sapply("[", 2)
refine <- refine[-4]
refine$product_code <- refine$product_code %>%
str_replace_all(c("p" = "Smartphone", "v" = "TV", "x" = "Laptop", "q" = "Tablet"))
refine <- add_column(refine, full_address = , .after = 4)
refine <- unite(refine, full_address, c(address, city, country), sep = ", ", remove=FALSE)
refine <- refine[-c(5:7)]
#add_column(refine, company_philips, company_akzo, company_van_houten, company_unilever, .after = 1)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(readxl)
library(tidyverse)
library(stringr)
refine <- read_xlsx("~/Downloads/refine-1.xlsx")
akzo <- which(tolower(refine$company) %>% str_detect("ak"))
vanhouten <- which(tolower(refine$company) %>% str_detect("hou"))
unilever <- which(tolower(refine$company) %>% str_detect("uni"))
phillips <- which(tolower(refine$company) %>% str_detect("ps"))
refine$company[phillips] = "philips"
refine$company[akzo] = "akzo"
refine$company[vanhouten] = "van houten"
refine$company[unilever] = "unilever"
refine <- add_column(refine, product_code = "1", .before = 2)
refine <- add_column(refine, product_number = "1", .after = 2)
refine$product_code = str_sub(refine$`Product code / number`, 1, 1)
refine$product_number <- str_split(refine$`Product code / number`, "-") %>%
sapply("[", 2)
refine <- refine[-4]
refine$product_code <- refine$product_code %>%
str_replace_all(c("p" = "Smartphone", "v" = "TV", "x" = "Laptop", "q" = "Tablet"))
refine <- add_column(refine, full_address = , .after = 4)
refine <- unite(refine, full_address, c(address, city, country), sep = ", ", remove=FALSE)
refine <- refine[-c(5:7)]
#add_column(refine, company_philips, company_akzo, company_van_houten, company_unilever, .after = 1)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(readxl)
library(tidyverse)
library(stringr)
refine <- read_xlsx("~/Downloads/refine-1.xlsx")
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(readxl)
library(tidyverse)
library(stringr)
refine <- read.csv("~/R/github/springboard\ exercises/springboard\ exercises/refine_original.csv")
akzo <- which(tolower(refine$company) %>% str_detect("ak"))
vanhouten <- which(tolower(refine$company) %>% str_detect("hou"))
unilever <- which(tolower(refine$company) %>% str_detect("uni"))
phillips <- which(tolower(refine$company) %>% str_detect("ps"))
refine$company[phillips] = "philips"
refine$company[akzo] = "akzo"
refine$company[vanhouten] = "van houten"
refine$company[unilever] = "unilever"
refine <- add_column(refine, product_code = "1", .before = 2)
refine <- add_column(refine, product_number = "1", .after = 2)
refine$product_code = str_sub(refine$`Product code / number`, 1, 1)
refine$product_code = str_sub(refine$`Product code / number`, 1, 1)
str_sub(refine$`Product code / number`, 1, 1)
str(refine)
refine$product_code = str_sub(as.character(refine$`Product code / number`), 1, 1)
refine <- read_csv2("~/R/github/springboard\ exercises/springboard\ exercises/refine_original.csv")
refine <- read_csv("~/R/github/springboard\ exercises/springboard\ exercises/refine_original.csv")
View(refine)
refine <- read_csv("~/R/github/springboard\ exercises/springboard\ exercises/refine_original.csv")
akzo <- which(tolower(refine$company) %>% str_detect("ak"))
vanhouten <- which(tolower(refine$company) %>% str_detect("hou"))
unilever <- which(tolower(refine$company) %>% str_detect("uni"))
phillips <- which(tolower(refine$company) %>% str_detect("ps"))
refine$company[phillips] = "philips"
refine$company[akzo] = "akzo"
refine$company[vanhouten] = "van houten"
refine$company[unilever] = "unilever"
refine <- add_column(refine, product_code = "1", .before = 2)
refine <- add_column(refine, product_number = "1", .after = 2)
refine$product_code = str_sub(as.character(refine$`Product code / number`), 1, 1)
refine$product_number <- str_split(refine$`Product code / number`, "-") %>%
sapply("[", 2)
refine <- refine[-4]
refine$product_code <- refine$product_code %>%
str_replace_all(c("p" = "Smartphone", "v" = "TV", "x" = "Laptop", "q" = "Tablet"))
refine <- add_column(refine, full_address = , .after = 4)
refine <- unite(refine, full_address, c(address, city, country), sep = ", ", remove=TRUE)
#refine <- refine[-c(5:7)]
add_column(refine, company_philips, company_akzo, company_van_houten, company_unilever, .after = 1)
library(data.table)
?dcast
for (i in unique(refine$company)){
df[,paste0(i)]=ifelse(df$Breed==i,1,0)
}
for(t in unique(refine$company)) {
+   refine[paste("company",t,sep="")] <- ifelse(refine$company==t,1,0)
+ }
for(t in unique(refine$company)) {
refine[paste("company",t,sep="")] <- ifelse(refine$company==t,1,0)
}
refine[-c(6:9)]
refine <- refine[-c(6:9)]
for(t in unique(refine$company)) {
refine[paste("company",t,sep="_")] <- ifelse(refine$company==t,1,0)
}
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(tidy.opts=list(width.cutoff=60),tidy=TRUE)
refine[paste("product",t,sep="_")] <- ifelse(refine$product_code==t,1,0)
View(refine)
refine <- refine[-10]
refine[paste("product",p,sep="_")] <- ifelse(refine$product_code==p,1,0)
for(p in unique(refine$product_code)) {
refine[paste("product",p,sep="_")] <- ifelse(refine$product_code==p,1,0)
#add_column(refine, product_smartphone, product_tv, product_laptop, product_tablet, .after = 2)
#add_column(refine, company_philips, company_akzo, company_van_houten, company_unilever, .after = 1)
for(p in unique(refine$product_code)) {
refine[paste("product",p,sep="_")] <- ifelse(refine$product_code==p,1,0)
#add_column(refine, product_smartphone, product_tv, product_laptop, product_tablet, .after = 2)
#add_column(refine, company_philips, company_akzo, company_van_houten, company_unilever, .after = 1)
for(p in unique(refine$product_code)) {
refine[paste("product",p,sep="_")] <- ifelse(refine$product_code==p,1,0)
#add_column(refine, product_smartphone, product_tv, product_laptop, product_tablet, .after = 2)
#add_column(refine, company_philips, company_akzo, company_van_houten, company_unilever, .after = 1)
for(p in unique(refine$product_code)) {
refine[paste("product",p,sep="_")] <- ifelse(refine$product_code==p,1,0)
for(p in unique(refine$product_code)) {
refine[paste("product",p,sep="_")] <- ifelse(refine$product_code==p,1,0)
}
refine <- refine[-c(10:13)]
for(p in tolower(unique(refine$product_code))) {
refine[paste("product",p,sep="_")] <- ifelse(refine$product_code==p,1,0)
}
refine <- refine[-c(10:13)]
refine[paste("product",tolower(p),sep="_")] <- ifelse(refine$product_code==p,1,0)
refine[paste("product",tolower(p),sep="_")] <- ifelse(refine$product_code==p,1,0) }
for(p in unique(refine$product_code)) {
refine[paste("product",tolower(p),sep="_")] <- ifelse(refine$product_code==p,1,0)
}
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(tidy.opts=list(width.cutoff=60),tidy=TRUE)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(tidy.opts=list(width.cutoff=60),tidy=TRUE)
library(dplyr)
library(tidyverse)
library(stringr)
refine <- read_csv("~/R/github/springboard\ exercises/springboard\ exercises/refine_original.csv")
akzo <- which(tolower(refine$company) %>% str_detect("ak"))
vanhouten <- which(tolower(refine$company) %>% str_detect("hou"))
unilever <- which(tolower(refine$company) %>% str_detect("uni"))
phillips <- which(tolower(refine$company) %>% str_detect("ps"))
refine$company[phillips] = "philips"
refine$company[akzo] = "akzo"
refine$company[vanhouten] = "van houten"
refine$company[unilever] = "unilever"
refine <- add_column(refine, product_code = "1", .before = 2)
refine <- add_column(refine, product_number = "1", .after = 2)
refine$product_code = str_sub(as.character(refine$`Product code / number`), 1, 1)
refine$product_number <- str_split(refine$`Product code / number`, "-") %>%
sapply("[", 2)
refine <- refine[-4]
refine$product_code <- refine$product_code %>%
str_replace_all(c("p" = "Smartphone", "v" = "TV", "x" = "Laptop", "q" = "Tablet"))
refine <- add_column(refine, full_address = , .after = 4)
refine <- unite(refine, full_address, c(address, city, country), sep = ", ", remove=TRUE)
#refine <- refine[-c(5:7)]
for(t in unique(refine$company)) {
refine[paste("company",t,sep="_")] <- ifelse(refine$company==t,1,0)
}
for(p in unique(refine$product_code)) {
refine[paste("product",tolower(p),sep="_")] <- ifelse(refine$product_code==p,1,0)
}
#add_column(refine, product_smartphone, product_tv, product_laptop, product_tablet, .after = 2)
#add_column(refine, company_philips, company_akzo, company_van_houten, company_unilever, .after = 1)
write.csv("~/R/github/springboard\ exercises/springboard\ exercises/refine_clean.csv")
write.csv("~/R/github/springboard\ exercises/springboard\ exercises/refine_clean.csv, refine")
write.csv(file="~/R/github/springboard\ exercises/springboard\ exercises/refine_clean.csv, x=refine")
?write.csv
write.csv(frefine, "~/R/github/springboard\ exercises/springboard\ exercises/refine_clean.csv")
write.csv(refine, "~/R/github/springboard\ exercises/springboard\ exercises/refine_clean.csv")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(tidy.opts=list(width.cutoff=60),tidy=TRUE)
titanic <- read_xlsx("~/R/github/springboard\ exercises/springboard\ exercises/titanic3.xls")
titanic <- read_xls("~/R/github/springboard\ exercises/springboard\ exercises/titanic3.xls")
write.csv(titanic, "~/R/github/springboard\ exercises/springboard\ exercises/titanic_original.csv")
View(titanic)
titanic$embarked
which(is.na(titanic$embarked))
titanic <- read.csv("~/R/github/springboard\ exercises/springboard\ exercises/titanic_original.csv")
which(is.na(titanic$embarked))
omitted.embarked <- which(is.na(titanic$embarked))
titanic$embarked[omitted.embarked] = "S"
which(is.na(titanic$embarked))
is.na(titanic$embarked)
sum(is.na(titanic$embarked))
titanic$age
mean(titanic$age)
?mean)
?mean
mean(titanic$age, na.rm = TRUE)
titanic$age[omitted.age] = mean(titanic$age, na.rm = TRUE)
omitted.age <- which(is.na(titanic$age))
titanic$age[omitted.age] = mean(titanic$age, na.rm = TRUE)
titanic$age
titanic$boat
which(is.na(titanic$boat))
unavailable.boat = which(is.na(titanic$boat))
titanic$boat[unavailable.boat] = "NA"
titanic$boat[unavailable.boat] = 'NA'
titanic$boat[unavailable.boat] = 'None'
titanic$boat[unavailable.boat] <- 'None'
str(titanic)
titanic$boat[unavailable.boat] = 0
str(titanic$boat)
str(titanic$boat)
add_column(titanic, has_cabin_number = ifelse(is.na(titanic$cabin)),0,1), .after = 11)
add_column(titanic, has_cabin_number = , .after = 11)
for(t in unique(titanic$cabin)) {
titanic$has_cabin_number[] <- ifelse(is.na(titanic$cabin)),0,1)
titanic$has_cabin_number[] <- ifelse(titanic$cabin == 'NA',0,1)
titanic <- add_column(titanic, has_cabin_number = , .after = 11)
titanic <- add_column(titanic, has_cabin_number = , .after = 11)
titanic <- add_column(titanic, has_cabin_number = , .after = 11)
titanic <- add_column(titanic, has_cabin_number = , .before = 12)
titanic <- add_column(titanic, has_cabin_number = 0, .before = 12)
for(t in unique(titanic$cabin)) {
titanic$has_cabin_number <- ifelse(is.na(titanic$cabin)),0,1)
is.na(titanic$cabin)
titanic$has_cabin_number[t] <- ifelse(is.na(titanic$cabin[t])),0,1)
titanic$has_cabin_number <- ifelse(is.na(t)),0,1)
for(t in titanic$cabin) {
titanic$has_cabin_number <- ifelse(is.na(t)),0,1)
titanic$has_cabin_number <- ifelse(is.na(titanic$cabin)),0,1)
titanic$has_cabin_number <- ifelse(is.na(titanic$cabin)), 0, 1)
titanic$has_cabin_number <- ifelse(is.na(titanic$cabin)) 0, 1)
#titanic <- add_column(titanic, has_cabin_number = , .after = 11)
titanic <- add_column(titanic, has_cabin_number = 0, .before = 12)
titanic$has_cabin_number <- ifelse(is.na(titanic$cabin)[1], 0, 1)
titanic$has_cabin_number <- ifelse(is.na(titanic$cabin), 0, 1)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(tidy.opts=list(width.cutoff=60),tidy=TRUE)
#titanic <- read_xls("~/R/github/springboard\ exercises/springboard\ exercises/titanic3.xls")
#write.csv(titanic, "~/R/github/springboard\ exercises/springboard\ exercises/titanic_original.csv")
titanic <- read.csv("~/R/github/springboard\ exercises/springboard\ exercises/titanic_original.csv")
# These dummy values already exist as evidenced by the output of the following command.
str(titanic$boat)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(tidy.opts=list(width.cutoff=60),tidy=TRUE)
#titanic <- read_xls("~/R/github/springboard\ exercises/springboard\ exercises/titanic3.xls")
#write.csv(titanic, "~/R/github/springboard\ exercises/springboard\ exercises/titanic_original.csv")
titanic <- read.csv("~/R/github/springboard\ exercises/springboard\ exercises/titanic_original.csv")
# These dummy values already exist as evidenced by the output of the following command.
str(titanic$boat)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(tidy.opts=list(width.cutoff=60),tidy=TRUE)
#titanic <- read_xls("~/R/github/springboard\ exercises/springboard\ exercises/titanic3.xls")
#write.csv(titanic, "~/R/github/springboard\ exercises/springboard\ exercises/titanic_original.csv")
titanic <- read.csv("~/R/github/springboard\ exercises/springboard\ exercises/titanic_original.csv")
omitted.embarked <- which(is.na(titanic$embarked))
titanic$embarked[omitted.embarked] = "S"
omitted.age <- which(is.na(titanic$age))
titanic$age[omitted.age] = mean(titanic$age, na.rm = TRUE)
unavailable.boat = which(is.na(titanic$boat))
# These dummy values already exist as evidenced by the output of the following command.
str(titanic$boat)
#titanic <- add_column(titanic, has_cabin_number = , .after = 11)
titanic <- add_column(titanic, has_cabin_number = 0, .before = 12)
titanic$has_cabin_number <- ifelse(is.na(titanic$cabin), 0, 1)
write.csv(titanic, "~/R/github/springboard\ exercises/springboard\ exercises/titanic_clean.csv")
getwd()
wine <- read.csv("./wine")
wine <- read.csv("./wine.csv")
str(wine)
summary(wine)
model1 <- lm(Price~AGST, data=wine)
summary(model1)
model1$residuals
SSE <- sum(model1$residuals^2)
SSE
model2 <- lm(Price~AGST + HarvestRain, data=wine)
model2
summary(model2)
SSE <- sum(model2$residuals^2)
SSE
model3 <- lm(Price~AGST + HarvestRain + WinterRain + Age + FrancePop, data=wine)
summary(model3)
SSE <- sum(model3$residuals^2)
SSE
model4 <- lm(Price~AGST + HarvestRain + WinterRain + Age, data=wine)
SSE <- sum(model4$residuals^2)
summary(model4)
cor(wine$WinterRain, wine$Price)
cor(wine$Age, wine$FrancePop)
cor(wine)
model5 <- lm(Price~AGST + HarvestRain + WinterRain data=wine)
model5 <- lm(Price~AGST + HarvestRain + WinterRain, data=wine)
summary(model5)
wineTest <- read.csv(">/wine_test.csv")
wineTest <- read.csv("./wine_test.csv")
wineTest
str(wineTest)
predictTest <- predict(model4, newdata=wineTest)
predictTest
SSE <- sum((wineTest$Price - predictTest)^2)
SST <- sum((wineTest$Price - mean(wineTest$Price))^2)
1 - (SSE/SST)
SST <- sum((wineTest$Price - mean(wine$Price))^2)
1 - (SSE/SST)
setwd(getwd()) # where am I?
list.files()
setwd("./linear\ regression")
setwd("./linear_regression")
list.files()
list.files("dataSets")
load("dataSets/states.rds")
states <- readRDS("dataSets/states.rds")
str(states)
glimpse(states)
View(states)
states.info <- data.frame(attributes(states)[c("state", "energy", "metro")])
states.info
states.info <- subset(states, select = c("state", "energy", "metro"))
states.info
summary(states.info)
cor(states.info)
cor(states.info[2:3])
states.info <- subset(states, select = c("energy", "metro"))
str(states)
str(states.info)
summary(states.info)
cor(states.info)
plot(states.info)
summary(lm(energy ~ metro , data=states.info))
states.mod <- lm(energy ~ metro, data=states.info
summary(lm(energy ~ metro , data=states.info))
##   3. `plot' the model to look for deviations from modeling assumptions
##   Select one or more additional predictors to add to your model and
##   repeat steps 1-3. Is this model significantly better than the model
##   with /metro/ as the only predictor?
## Interactions and factors
## ══════════════════════════
## Modeling interactions
## ─────────────────────────
##   Interactions allow us assess the extent to which the association
##   between one predictor and the outcome depends on a second predictor.
##   For example: Does the association between expense and SAT scores
##   depend on the median income in the state?
#Add the interaction to the model
sat.expense.by.percent <- lm(csat ~ expense*income,
data=states.data)
#Show the results
coef(summary(sat.expense.by.percent)) # show regression coefficients table
## Regression with categorical predictors
## ──────────────────────────────────────────
##   Let's try to predict SAT scores from region, a categorical variable.
##   Note that you must make sure R does not think your categorical
##   variable is numeric.
# make sure R knows region is categorical
str(states.data$region)
states.data$region <- factor(states.data$region)
#Add region to the model
sat.region <- lm(csat ~ region,
data=states.data)
#Show the results
coef(summary(sat.region)) # show regression coefficients table
anova(sat.region) # show ANOVA table
##   Again, *make sure to tell R which variables are categorical by
##   converting them to factors!*
## Setting factor reference groups and contrasts
## ─────────────────────────────────────────────────
##   In the previous example we use the default contrasts for region. The
##   default in R is treatment contrasts, with the first level as the
##   reference. We can change the reference group or use another coding
##   scheme using the `C' function.
# print default contrasts
contrasts(states.data$region)
# change the reference group
coef(summary(lm(csat ~ C(region, base=4),
data=states.data)))
# change the coding scheme
coef(summary(lm(csat ~ C(region, contr.helmert),
data=states.data)))
states.mod <- lm(energy ~ metro, data=states.info)
summary(states.mod)
par(mar = c(4, 4, 2, 2), mfrow = c(1, 2)) #optional
plot(states.mod, which = c(1, 2))
glimpse(states)
states.info2 <- subset(states, select = c("energy", "metro", "density"))
str(states.info2)
cor(states.info2)
plot(states.info2)
states.mod2 <- lm(energy ~ metro, data=states.info2)
summary(states.mod2)
states.mod2 <- lm(energy ~ metro + density, data=states.info2)
summary(states.mod2)
par(mar = c(4, 4, 2, 2), mfrow = c(1, 2)) #optional
plot(states.mod2, which = c(1, 2))
glimpse(states)
states.info2 <- subset(states, select = c("energy", "metro", "green", "waste"))
str(states.info2)
cor(states.info2)
plot(states.info2)
states.mod2 <- lm(energy ~ metro + green + waste, data=states.info2)
summary(states.mod2)
par(mar = c(4, 4, 2, 2), mfrow = c(1, 2)) #optional
plot(states.mod2, which = c(1, 2))
states.info2 <- subset(states, select = c("energy", "metro", "green"))
states.mod2 <- lm(energy ~ metro + green + waste, data=states.info2)
states.mod2 <- lm(energy ~ metro + green, data=states.info2)
summary(states.mod2)
states.info2 <- subset(states, select = c("energy", "metro", "waste"))
states.mod2 <- lm(energy ~ metro + waste, data=states.info2)
summary(states.mod2)
states.info2 <- subset(states, select = c("energy", "metro", "density", "green", "waste"))
states.mod2 <- lm(energy ~ metro + density + green + waste, data=states.info2)
summary(states.mod2)
confint(states.mod)
confint(states.mod2)
states <- readRDS("dataSets/states.rds")
states.info <- subset(states, select = c("energy", "metro"))
str(states)
str(states.info)
cor(states.info)
plot(states.info)
##   2. Print and interpret the model `summary'
states.mod <- lm(energy ~ metro, data=states.info)
summary(states.mod)
##   3. `plot' the model to look for deviations from modeling assumptions
par(mar = c(4, 4, 2, 2), mfrow = c(1, 2)) #optional
plot(states.mod, which = c(1, 2))
summary(states.mod$metro)
summary(states.mod)
states.info2 <- subset(states, select = c("energy", "metro", "density"))
cor(states.info2)
plot(states.info2)
summary(states.info2)
states.info2 <- subset(states, select = c("energy", "metro", "density" , "waste"))
cor(states.info2)
plot(states.info2)
states.mod2 <- lm(energy ~ metro + density + green + waste, data=states.info2)
summary(states.mod2)
states.info2 <- subset(states, select = c("energy", "metro", "density", "green" , "waste"))
cor(states.info2)
plot(states.info2)
states.mod2 <- lm(energy ~ metro + density + green + waste, data=states.info2)
summary(states.mod2)
plot(states.mod2, which = c(1, 2))
states.mod2 <- lm(energy ~ metro + density + green + waste + metro:waste, data=states.info2)
summary(states.mod2)
plot(states.mod2, which = c(1, 2))
states.mod2 <- lm(energy ~ metro + density + green + waste + metro*waste, data=states.info2)
summary(states.mod2)
states.mod2 <- lm(energy ~ metro + density + green + waste + density*green, data=states.info2)
summary(states.mod2)
plot(states.mod2, which = c(1, 2))
